from operator import itemgetter

from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI


content = """
2023年我们都知道就业市场惨声一片，公司动不动就来个优化裁员。    图片   就在去年，一个做运营的朋友，因为公司效益不好，整个部门都被裁了，我这个朋友在9月份被裁员后，就一直在找工作。    他和我吐槽说，找了好几份工作，降薪了不说，同样一个岗位，压力大了不少，恨不得让自己同时做几份工作，加班加点的，最后扛不住，做了一周就走了。    现在春节一过，就业市场没有回暖，反而变得更难了，现在甚至是波及好几个行业，一场事业潮正在悄然靠近。    根据一些消息说，这四个行业会是裁员的重灾区。对于每个职场人来说，这无疑是个坏消息，每个人都面临巨大的挑战最好提前做好应对的准备。    1.  互联网行业    现在的互联网行业不比之前了，在几年前互联网行业一片欣欣向荣的景象，像产品经理这些岗位都很吃香，似乎只要从事互联网的职位，薪资待遇都不会差。    图片   后来越来越多人的人看中了互联网的红利，大家纷纷转型到互联网这边，于是，就出现了各种非常卷的现象，大家卷学历，卷价格，卷服务。    互联网也不缺人才，造成了大家也越来越难找工作的现象，同时现有的资源，只有这么多，来分这块蛋糕的人变得更多了，利润肉眼可见的减少。  所以很多互联网公司开始各种裁员和优化。    2.  房地产行业    房地产行业，大家都说曾经有多风光，现在就有多沮丧。现在国家政策管控的越来越严格，加上现在结婚的人越来少，对于婚房也就没那么需要了，房地产的一大半收入被切断。直接缩减 了收益。    图片   据网友反应，碧桂园现在在想各种方法维稳，公司董事带头降薪。    图片   在以后，或许会变得更加难，大家收入减少，对于房子的需求也会减少，本来收入就少了，谁还会冒这么大的风险，买房还房贷呢？    3.实体零售业    现如今实体行业面临的挑战更大了，特别是来自电商行业 的冲击。    最近一年，电商行业是一片欣欣向荣的景象，大家也更愿意网上购物，毕竟只需要动动手指就可以挑选到自己想要的商品了，而且价格上会比实体店优惠很多，同时加入电商行业的人越来越多，大家变着法来吸引消费者。    实体零售业的客流量减少，效益逐渐下降，也就不需要那么多的员工了。    4.  孕婴幼儿行业    当看到这个行业时，大家肯定会疑惑，孕婴行业不是很容易挣钱吗，婴儿用品都是必须要用的，哪怕贵，宝爸宝妈都不惜给孩子更好更安全的，还有各种高价的月子中心，产后修复班等等。    我们先来看看我国2016年到2022年的人口出生率报告：    图片   我国出生人口在逐年的递减，也就意味着母婴产品需求开始减少，同时也会影响到幼师失业率增高，幼儿园来上课的孩子也会变少。    面对这不确定性的就业环境，不管是哪个行业都有可能走上夕阳，现在没有什么稳定的岗位，我们永远不知道明天我们会遇到什么样的变化。    我们总会遇到各种挑战，我们所能做的就是，随时关注行业的变化，同时自己也要不断的学习，去掌握更多的技能，应对各种不确定性。
"""

prompt1 = ChatPromptTemplate.from_template("读取这篇文章并且总结这篇文章的特点：{content}")

prompt2 = ChatPromptTemplate.from_template(
    "{content} \n这篇文章的写作风格是什么？"
)

prompt3 = ChatPromptTemplate.from_template(
"""
你是一个爆款网文写作大师，你基于参考文章 
【{content}】
总结出了这篇文章的特点：
【{characteristics}】
以及这篇文章的写作风格是：
【{style}】
请根据以上要求，
写出一篇公众号的爆款文章，要求1300个字。 """
)

model = ChatOpenAI(model="gpt-4-0125-preview")

chain1 = prompt1 | model | StrOutputParser()
chain2 = prompt2 | model | StrOutputParser()

chain3 = (
    {"characteristics": chain1, "style": chain2, 'content': lambda x: x["content"]}
    | prompt3
    | model
    | StrOutputParser()
)
for s in chain3.stream(input={'content': content}):
    print(s, end="", flush=True)